#!/usr/bin/python3

import requests
import muckrock_utils as mr_utils
import json

class Jurisdiction():
    def __init__(self, id, name, slug, full_name, abbrev, 
                 level, parent, public_notes, absolute_url,
                 average_response_time, fee_rate, success_rate):
            self.id = id
            self.name = name
            self.slug = slug
            self.full_name = full_name
            self.abbrev = abbrev
            self.level = level
            self.parent = parent
            self.public_notes = public_notes
            self.absolute_url = absolute_url
            self.average_response_time = average_response_time
            self.fee_rate = fee_rate
            self.success_rate = success_rate

class Agency():
    def __init__(self, id, name, slug, status, stale, exempt, types, 
                 requires_proxy,  jurisdiction, location,  website, 
                 twitter, twitter_handles, parent, appeal_agency, 
                 url, foia_logs, foia_guide, public_notes, absolute_url, 
                 average_response_time, fee_rate, success_rate):

        self.id = id
        self.name = name
        self.slug = slug
        self.status = status
        self.stale = stale
        self.exempt = exempt
        self.types = types
        self.requires_proxy = requires_proxy
        self.jurisdiction = jurisdiction
        self.location = location
        self.website = website
        self.twitter = twitter
        self.twitter_handles = twitter_handles
        self.parent = parent
        self.appeal_agency = appeal_agency
        self.url = url
        self.foia_logs = foia_logs
        self.foia_guide = foia_guide
        self.public_notes = public_notes
        self.absolute_url = absolute_url
        self.average_response_time = average_response_time
        self.fee_rate = fee_rate
        self.success_rate = success_rate

class Request():
    def __init__(self, request_id, agency, title, 
                 slug, status, embargo, permanent_embargo, user, 
                 username, jurisdiction, requested_docs, 
                 description, date_submitted, date_due, days_until_due, 
                 date_followup, date_done, date_embargo, tracking_id, 
                 price, disable_autofollowups, tags):

        self.id = request_id
        self.title = title
        self.slug = slug
        self.status = status
        self.embargo = embargo
        self.permanent_embargo = permanent_embargo
        self.user = user
        self.username = username
        self.jurisdiction = jurisdiction
        self.agency = agency
        self.requested_docs = requested_docs
        self.description = description
        self.date_submitted = date_submitted
        self.date_due = date_due
        self.days_until_due = days_until_due
        self.date_followup = date_followup
        self.date_done = date_done
        self.date_embargo = date_embargo
        self.tracking_id = tracking_id
        self.price = price
        self.disable_autofollowups = disable_autofollowups
        self.tags = tags

class Muckrock():
    def __init__(self):
        self.jurisdictions = []

        self.token = mr_utils.muckrock_token()
        self.agencies = []
        self.jurisdictions = []
        self.states = []

    def muckrock_states(self):
        if self.states:
            return self.states

        base_url = 'https://www.muckrock.com/api_v1/jurisdiction'
        url = "%s/?level=s" % base_url 

        resp = mr_utils.json_from_url(url)
        self.states = resp['results']

        jurisdictions = [ self.juris_by_id(s) for s in self.states ]
       
        return jurisdictions

    def is_juris_state(self, juris_id):
        poss = [ s for s in self.muckrock_states() if juris_id == s['id'] ]
        if poss and len(poss) == 1:
            return True

        else:
            return False

    def juris_by_id(self, juris_id):
        print('juris: %s' % juris_id)
        for juris in self.jurisdictions:
            if juris.id == juris_id:
                return juris

        juris_details = mr_utils.request_juris(juris_id)
        ret_juris = Jurisdiction(**juris_details)
        self.jurisdictions.append(ret_juris)

        return ret_juris

    def agency_by_id(self, agency_id):
        print('agency: %s' % agency_id)
        for agency in self.agencies:
            if agency.id == agency_id:
                return agency

        agency_details = mr_utils.request_agency(agency_id)
        ret_agency = Agency(**agency_details)
        self.agencies.append(ret_agency)

        return ret_agency

def summarize_comms(comms_json): 
    written_resps = [ c for c in comms_json if not c['autogenerated'] ]
    auto_resps = [ c for c in comms_json if c['autogenerated'] ]

    auto_resp_count = len(auto_resps)
    resp_count = len(written_resps)
    last_comm = written_resps[-1]

    needs_followup = last_comm['response']
    last_comm_body = last_comm['communication']

    ret = { 'resp_count': resp_count,
            'auto_resp_count': auto_resp_count,
            'needs_followup': needs_followup,
            'last_comm_body': last_comm_body }

    return ret
