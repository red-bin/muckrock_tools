#!/usr/bin/python3

from requests import get, post
import muckrock_utils as mr_utils
import json

class Jurisdiction():
    def __init__(self, id, name, slug, full_name, abbrev, 
                 level, parent, public_notes, absolute_url,
                 average_response_time, fee_rate, success_rate):
            self.id = id
            self.name = name
            self.slug = slug
            self.full_name = full_name
            self.abbrev = abbrev
            self.level = level
            self.parent = parent
            self.public_notes = public_notes
            self.absolute_url = absolute_url
            self.average_response_time = average_response_time
            self.fee_rate = fee_rate
            self.success_rate = success_rate

class Agency():
    def __init__(self, id, name, slug, status, stale, exempt, types, 
                 requires_proxy,  jurisdiction, location,  website, 
                 twitter, twitter_handles, parent, appeal_agency, 
                 url, foia_logs, foia_guide, public_notes, absolute_url, 
                 average_response_time, fee_rate, success_rate):

        self.id = id
        self.name = name
        self.slug = slug
        self.status = status
        self.stale = stale
        self.exempt = exempt
        self.types = types
        self.requires_proxy = requires_proxy 
        self.jurisdiction = jurisdiction
        self.location = location
        self.website = website
        self.twitter = twitter
        self.twitter_handles = twitter_handles
        self.parent = parent
        self.appeal_agency = appeal_agency
        self.url = url
        self.foia_logs = foia_logs
        self.foia_guide = foia_guide
        self.public_notes = public_notes
        self.absolute_url = absolute_url
        self.average_response_time = average_response_time
        self.fee_rate = fee_rate
        self.success_rate = success_rate

class Communication():
    def __init__(self, foia, from_user, to_user, subject,
                 date, response, autogenerated, thanks,
                 full_html, communication, status, 
                 likely_foia, files, delivered):

        self.foia = foia
        self.from_user = from_user
        self.to_user = to_user
        self.subject = subject
        self.date = date
        self.response = response
        self.autogenerated = autogenerated
        self.thanks = thanks
        self.full_html = full_html
        self.communication = communication
        self.status = status
        self.likely_foia = likely_foia
        self.files = files
        self.delivered = delivered

    def download_files(self):
        for comm_file in self.files:
            url = comm_file['ffile']
            filename = url.split('/')[-1]
            resp = get(url, stream=True)

            yield (resp.content, filename)

class Request():
    def __init__(self, id, title, slug, status, embargo, 
                 permanent_embargo, user, username, jurisdiction, 
                 agency, requested_docs, description, date_submitted, 
                 date_due, days_until_due, date_followup, date_done, 
                 date_embargo, tracking_id, price, disable_autofollowups, 
                 tags, communications, absolute_url):

        self.id = id
        self.title = title
        self.slug = slug
        self.status = status
        self.embargo = embargo
        self.permanent_embargo = permanent_embargo
        self.user = user
        self.username = username
        self.jurisdiction = jurisdiction
        self.agency = agency
        self.requested_docs = requested_docs
        self.description = description
        self.date_submitted = date_submitted
        self.date_due = date_due
        self.days_until_due = days_until_due
        self.date_followup = date_followup
        self.date_done = date_done
        self.date_embargo = date_embargo
        self.tracking_id = tracking_id
        self.price = price
        self.disable_autofollowups = disable_autofollowups
        self.tags = tags
        self.absolute_url = absolute_url

        self.communications = self.create_communications(communications)

    def create_communications(self, comms):
        ret_comms = []
        for comm_json in comms:
            new_comm = Communication(**comm_json)
            ret_comms.append(new_comm)

        return ret_comms

    def download_files(self):
        for comm in self.communications:
            return Communication.download_files()

class Muckrock():
    def __init__(self):
        self.jurisdictions = []

        self.token = mr_utils.muckrock_token()
        self.agencies = []
        self.jurisdictions = []
        self.states = []
        self.requests = []

    def muckrock_states(self):
        if self.states:
            return self.states

        base_url = 'https://www.muckrock.com/api_v1/jurisdiction'
        url = "%s/?level=s" % base_url 

        resp = mr_utils.json_from_url(url)
        self.states = resp['results']

        jurisdictions = [ self.juris_by_id(s) for s in self.states ]
       
        return jurisdictions

    def is_juris_state(self, juris_id):
        poss = [ s for s in self.muckrock_states() if juris_id == s['id'] ]
        if poss and len(poss) == 1:
            return True

        else:
            return False

    def juris_by_id(self, juris_id):
        print('juris: %s' % juris_id)
        for juris in self.jurisdictions:
            if juris.id == juris_id:
                return juris

        juris_details = mr_utils.request_juris(juris_id)
        ret_juris = Jurisdiction(**juris_details)
        self.jurisdictions.append(ret_juris)

        return ret_juris

    def agency_by_id(self, agency_id):
        print('agency: %s' % agency_id)
        for agency in self.agencies:
            if agency.id == agency_id:
                return agency

        agency_details = mr_utils.request_agency(agency_id)
        ret_agency = Agency(**agency_details)
        self.agencies.append(ret_agency)

        return ret_agency

    def request_exists(self, request_id):
        for cached_request in self.requests:
            if cached_request.id == request_id:
                return cached_request

        return None

    def user_requests(self, username):
        base_url = 'https://www.muckrock.com/api_v1/foia'
        url = "%s?user=%s" % (base_url, username)
    
        requests_ret = []

        results = mr_utils.json_from_url(url)['results']
        for request_json in results:
            request_id = request_json['id']
            cached_request = self.request_exists(request_id)
            if cached_request:
                requests_ret.append(cached_request)
            else:
                new_request = Request(**request_json)
                requests_ret.append(new_request)
                self.requests.append(new_request)
       
        return requests_ret

    def send_request(self, subject, body, juris_id, agency_id):
        base_url = 'https://www.muckrock.com/api_v1/foia'

        agency = self.agency_by_id(agency_id)
        jurisdiction = self.juris_by_id(juris_id)

        data = {'title': subject, 'document_request': body,
                'jurisdiction': juris_id, 'agency': agency_id}

        print("Submitting to: %s - %s" 
                % (agency.name, jurisdiction.full_name))

        json_data = json.dumps(data)
        headers = mr_utils.get_headers()

        resp = post(base_url, headers=headers, data=data)
        return resp
