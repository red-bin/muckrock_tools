#!/usr/bin/python3

import requests
import muckrock_utils as mr_utils
import json

from shutil import copyfileobj

class Jurisdiction():
    def __init__(self, id, name, slug, abbrev, 
                 level, parent, public_notes, absolute_url,
                 average_response_time, fee_rate, success_rate):
            self.id = id
            self.name = name
            self.slug = slug
            self.abbrev = abbrev
            self.level = level
            self.parent = parent
            self.public_notes = public_notes
            self.absolute_url = absolute_url
            self.average_response_time = average_response_time
            self.fee_rate = fee_rate
            self.success_rate = success_rate

            self.agencies = None

class Agency():
    def __init__(self, id, name, slug, status, exempt, types, 
                 requires_proxy,  jurisdiction, location,  website, 
                 twitter, twitter_handles, parent, appeal_agency, 
                 url, foia_logs, foia_guide, public_notes, absolute_url, 
                 average_response_time, fee_rate, success_rate):

        self.id = id
        self.name = name
        self.slug = slug
        self.status = status
        self.exempt = exempt
        self.types = types
        self.requires_proxy = requires_proxy 
        self.jurisdiction = jurisdiction
        self.location = location
        self.website = website
        self.twitter = twitter
        self.twitter_handles = twitter_handles
        self.parent = parent
        self.appeal_agency = appeal_agency
        self.url = url
        self.foia_logs = foia_logs
        self.foia_guide = foia_guide
        self.public_notes = public_notes
        self.absolute_url = absolute_url
        self.average_response_time = average_response_time
        self.fee_rate = fee_rate
        self.success_rate = success_rate

class Communication():
    def __init__(self, foia, from_user, to_user, subject,
                 datetime, response, autogenerated, thanks,
                 full_html, communication, status, 
                 likely_foia, files, delivered):

        self.foia = foia
        self.from_user = from_user
        self.to_user = to_user
        self.subject = subject
        self.datetime = datetime
        self.response = response
        self.autogenerated = autogenerated
        self.thanks = thanks
        self.full_html = full_html
        self.communication = communication
        self.status = status
        self.likely_foia = likely_foia
        self.files = files
        self.delivered = delivered

#TODO: declunkify this
class Request():
    def __init__(self, id, title, slug, status, embargo, 
                 permanent_embargo, user, username,
                 agency, datetime_submitted, 
                 date_due, days_until_due, date_followup, datetime_done, 
                 date_embargo, tracking_id, price, disable_autofollowups, 
                 tags, notes, communications, absolute_url):

        self.id = id
        self.title = title
        self.slug = slug
        self.status = status
        self.embargo = embargo
        self.permanent_embargo = permanent_embargo
        self.user = user
        self.username = username
        self.agency = agency
        self.datetime_submitted = datetime_submitted
        self.date_due = date_due
        self.days_until_due = days_until_due
        self.date_followup = date_followup
        self.datetime_done = datetime_done
        self.date_embargo = date_embargo
        self.tracking_id = tracking_id
        self.price = price
        self.disable_autofollowups = disable_autofollowups
        self.tags = tags
        self.notes = notes
        self.absolute_url = absolute_url

        self.communications = self.create_communications(communications)
        #self.raw_email = self.get_raw_email()

    def get_raw_email(self):
        url = 'https://www.muckrock.com/foi/raw_email/%s/' % self.id
        resp = requests.get(url)

        return resp.json()

    def create_communications(self, comms):
        ret_comms = []
        for comm_json in comms:
            new_comm = Communication(**comm_json)
            ret_comms.append(new_comm)

        return ret_comms

    def doc_txt_stream(self, doc_id):
        doccloud_id = doc_id.split('-')[0]
        doccloud_file = '-'.join(doc_id.split('-')[1:])

        doccloud_url = "https://assets.documentcloud.org/documents/{}/{}.txt"
        doccloud_url = doccloud_url.format(doccloud_id, doccloud_file)

        print("Downloading ", doccloud_url)

        #add error checking
        try:
            response = requests.get(doccloud_url, stream=True)
            return response.raw

        except:
            print("No doccloud file for ", doccloud_url)
            return None

    def download_files(self, savedir='/tmp/', inc_doccloud=True):
        from os import makedirs
        savedir = '/tmp/{}'.format(self.id)

        makedirs(savedir, exist_ok=True)

        for comm in self.communications:
            for comm_file in comm.files:
                response = requests.get(comm_file['ffile'], stream=True)
                filename = comm_file['ffile'].split('/')[-1]

                savepath = '{}/{}'.format(savedir, filename)
                print("Saving {} to {}".format(filename, savepath))

                with open(savepath, 'wb') as out_file:
                    copyfileobj(response.raw, out_file)

                if inc_doccloud:
                    txt_stream = self.doc_txt_stream(comm_file['doc_id'])
                    txt_path = "{}.txt".format(savepath)

                    if txt_stream:
                        with open(txt_path, 'wb') as out_file:
                            copyfileobj(txt_stream, out_file)

class Muckrock():
    def __init__(self):
        self.jurisdictions = []

        self.token = mr_utils.muckrock_token()
        self.agencies = []
        self.jurisdictions = []
        self.states = []
        self.requests = []

    def muckrock_states(self):
        if self.states:
            return self.states

        base_url = 'https://www.muckrock.com/api_v1/jurisdiction'
        url = "%s/?level=s" % base_url 

        resp = mr_utils.json_from_url(url)
        self.states = resp

        jurisdictions = [ self.juris_by_id(s) for s in self.states ]
       
        return jurisdictions

    def request_by_id(self, request_id):
        cached_request = self.request_exists(request_id)
        if cached_request:
            return cached_request

        url = 'https://www.muckrock.com/api_v1/foia/%s/' % request_id
        results = mr_utils.json_from_url(url)
        
        new_request = Request(**results)

        self.requests.append(new_request)

        return new_request
    
    def is_juris_state(self, juris_id):
        poss = [ s for s in self.muckrock_states() if juris_id == s['id'] ]
        if poss and len(poss) == 1:
            return True

        else:
            return False

    def juris_by_id(self, juris_id):
        print('juris: %s' % juris_id)
        for juris in self.jurisdictions:
            if juris.id == juris_id:
                return juris

        juris_details = mr_utils.request_juris(juris_id)
        ret_juris = Jurisdiction(**juris_details)
        self.jurisdictions.append(ret_juris)

        return ret_juris

    def agency_by_id(self, agency_id):
        print('agency: %s' % agency_id)
        for agency in self.agencies:
            if agency.id == agency_id:
                return agency

        agency_details = mr_utils.request_agency(agency_id)
        ret_agency = Agency(**agency_details)
        self.agencies.append(ret_agency)

        return ret_agency

    def is_cached(self, agency_id):
        for agency in self.agencies:
            if agency.id == agency_id:
                return True

        return False

    def agency_search(self, name='', status='', juris_id='',
                      types_name='', requires_proxy=''):
        base_url = 'https://www.muckrock.com/api_v1/agency'
        url_format = '%s/?name=%s&status=%s&jurisdiction=%s&types=%s'
        url = url_format % (base_url, name, status, juris_id, types_name)

        results = mr_utils.json_from_url(url)

        ret = []
        for agency in results:
            agency_id = agency['id']
            if not self.is_cached(agency_id):
                agency_obj = Agency(**agency)
                self.agencies.append(agency)
            else:
                agency_obj = self.agency_by_id(agency_id)

            ret.append(agency_obj)

        return ret

    def request_exists(self, request_id):
        for cached_request in self.requests:
            if cached_request.id == request_id:
                return cached_request

        return None

    #Takes a long time and is NOT optimized.
    def all_requests(self):
        url = 'https://www.muckrock.com/api_v1/foia?page_size=10000'
        ret = mr_utils.json_from_url(url)

        return ret

    def all_communications(self):
        url = 'https://www.muckrock.com/api_v1/communication?page_size=10000'
        ret = mr_utils.json_from_url(url)

        return ret

    def user_requests(self, username):
        base_url = 'https://www.muckrock.com/api_v1/foia'
        url = "%s?user=%s" % (base_url, username)
    
        requests_ret = []

        results = mr_utils.json_from_url(url)
        for request_json in results:
            request_id = request_json['id']
            cached_request = self.request_exists(request_id)
            if cached_request:
                requests_ret.append(cached_request)
            else:
                new_request = Request(**request_json)
                requests_ret.append(new_request)
                self.requests.append(new_request)
       
        return requests_ret

    def send_request(self, subject, body, juris_id, agency_id, prompt=False):
        base_url = 'https://www.muckrock.com/api_v1/foia/'

        agency = self.agency_by_id(agency_id)
        jurisdiction = self.juris_by_id(juris_id)


        data = {'title': subject, 
                'full_text': body,
                'document_request': body,
                'jurisdiction': juris_id, 
                'embargo': False,
                'agency': agency_id}

        print("Submitting to: %s - %s" 
                % (agency.name, jurisdiction.name))

        json_data = json.dumps(data)
        headers = mr_utils.get_headers()

        if prompt:
            yn = input('Continue? (Y/N)\n')
            if yn not in ['y','Y']:
                print('Exiting!')
                exit(1)

        print(headers)
        print()
        print(json_data)
        print()
        resp = requests.post(base_url, headers=headers, data=json_data)
        return resp
